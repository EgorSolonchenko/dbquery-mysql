<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a2" title="DBQuery">
  <file path="test/src/DBQuery/SplitterTest.php" hash="06ac5a37c393c7a7ec56f602cac77147" package="Misc">
    <parse_markers>
      <error line="17" code="50015">Argument $sql is missing from the Docblock of cleanQuery()</error>
      <error line="27" code="50010">No DocBlock was found for method testQuote_Null()</error>
      <error line="32" code="50010">No DocBlock was found for method testQuote_NullDefault()</error>
      <error line="37" code="50010">No DocBlock was found for method testQuote_Int()</error>
      <error line="42" code="50010">No DocBlock was found for method testQuote_Float()</error>
      <error line="47" code="50010">No DocBlock was found for method testQuote_True()</error>
      <error line="52" code="50010">No DocBlock was found for method testQuote_False()</error>
      <error line="57" code="50010">No DocBlock was found for method testQuote_String()</error>
      <error line="62" code="50010">No DocBlock was found for method testQuote_StringQuotes()</error>
      <error line="67" code="50010">No DocBlock was found for method testQuote_StringMultiline()</error>
      <error line="72" code="50010">No DocBlock was found for method testQuote_Array()</error>
      <error line="78" code="50010">No DocBlock was found for method testQuoteIdentifier_Simple()</error>
      <error line="83" code="50010">No DocBlock was found for method testQuoteIdentifier_Quoted()</error>
      <error line="88" code="50010">No DocBlock was found for method testQuoteIdentifier_TableColumn()</error>
      <error line="93" code="50010">No DocBlock was found for method testQuoteIdentifier_TableColumn_Quoted()</error>
      <error line="98" code="50010">No DocBlock was found for method testQuoteIdentifier_WithAlias()</error>
      <error line="103" code="50010">No DocBlock was found for method testQuoteIdentifier_Function()</error>
      <error line="108" code="50010">No DocBlock was found for method testQuoteIdentifier_Cast()</error>
      <error line="113" code="50010">No DocBlock was found for method testQuoteIdentifier_Cast_Confuse()</error>
      <error line="118" code="50010">No DocBlock was found for method testQuoteIdentifier_Expression()</error>
      <error line="123" code="50010">No DocBlock was found for method testQuoteIdentifier_None()</error>
      <error line="128" code="50010">No DocBlock was found for method testQuoteIdentifier_Strict()</error>
      <error line="133" code="50010">No DocBlock was found for method testQuoteIdentifier_Strict_TableColumn()</error>
      <error line="138" code="50010">No DocBlock was found for method testQuoteIdentifier_Strict_Fail()</error>
      <error line="145" code="50010">No DocBlock was found for method testIsIdentifier_Simple()</error>
      <error line="150" code="50010">No DocBlock was found for method testIsIdentifier_Quoted()</error>
      <error line="155" code="50010">No DocBlock was found for method testIsIdentifier_TableColumn()</error>
      <error line="160" code="50010">No DocBlock was found for method testIsIdentifier_TableColumn_Quoted()</error>
      <error line="165" code="50010">No DocBlock was found for method testIsIdentifier_Strange()</error>
      <error line="170" code="50010">No DocBlock was found for method testIsIdentifier_Strange_Quoted()</error>
      <error line="175" code="50010">No DocBlock was found for method testIsIdentifier_WithoutAlias_AsAlias()</error>
      <error line="180" code="50010">No DocBlock was found for method testIsIdentifier_WithoutAlias_SpaceAlias()</error>
      <error line="188" code="50010">No DocBlock was found for method testParse_Null()</error>
      <error line="193" code="50010">No DocBlock was found for method testParse_Integer()</error>
      <error line="198" code="50010">No DocBlock was found for method testParse_Float()</error>
      <error line="203" code="50010">No DocBlock was found for method testParse_Boolean()</error>
      <error line="208" code="50010">No DocBlock was found for method testParse_String()</error>
      <error line="213" code="50010">No DocBlock was found for method testParse_String_Confuse()</error>
      <error line="218" code="50010">No DocBlock was found for method testParse_String_Quote()</error>
      <error line="223" code="50010">No DocBlock was found for method testParse_String_Multiline()</error>
      <error line="228" code="50010">No DocBlock was found for method testParse_Array()</error>
      <error line="233" code="50010">No DocBlock was found for method testParse_Named()</error>
      <error line="238" code="50010">No DocBlock was found for method testParse_Like()</error>
      <error line="243" code="50010">No DocBlock was found for method testParse_Like_Named()</error>
      <error line="249" code="50010">No DocBlock was found for method testCountPlaceholders()</error>
      <error line="254" code="50010">No DocBlock was found for method testCountPlaceholders_Confuse()</error>
      <error line="262" code="50010">No DocBlock was found for method testGetQueryType_Select()</error>
      <error line="267" code="50010">No DocBlock was found for method testGetQueryType_Select_Word()</error>
      <error line="272" code="50010">No DocBlock was found for method testGetQueryType_Select_LowerCase()</error>
      <error line="277" code="50010">No DocBlock was found for method testGetQueryType_Select_Spaces()</error>
      <error line="282" code="50010">No DocBlock was found for method testGetQueryType_Insert()</error>
      <error line="287" code="50010">No DocBlock was found for method testGetQueryType_Replace()</error>
      <error line="292" code="50010">No DocBlock was found for method testGetQueryType_Delete()</error>
      <error line="297" code="50010">No DocBlock was found for method testGetQueryType_Truncate()</error>
      <error line="302" code="50010">No DocBlock was found for method testGetQueryType_AlterTable()</error>
      <error line="307" code="50010">No DocBlock was found for method testGetQueryType_AlterView_Spaces()</error>
      <error line="312" code="50010">No DocBlock was found for method testGetQueryType_AlterUnknown()</error>
      <error line="317" code="50010">No DocBlock was found for method testGetQueryType_Set()</error>
      <error line="322" code="50010">No DocBlock was found for method testGetQueryType_Begin()</error>
      <error line="327" code="50010">No DocBlock was found for method testGetQueryType_LoadDataInfile()</error>
      <error line="332" code="50010">No DocBlock was found for method testGetQueryType_Comment()</error>
      <error line="337" code="50010">No DocBlock was found for method testGetQueryType_Unknown()</error>
      <error line="343" code="50010">No DocBlock was found for method testHoldsIdentifiers_From()</error>
      <error line="348" code="50010">No DocBlock was found for method testHoldsIdentifiers_Select()</error>
      <error line="356" code="50010">No DocBlock was found for method testAddParts_Simple()</error>
      <error line="365" code="50010">No DocBlock was found for method testAddParts_Split()</error>
      <error line="372" code="50010">No DocBlock was found for method testAddParts_Append()</error>
      <error line="389" code="50010">No DocBlock was found for method testAddParts_Full()</error>
      <error line="405" code="50010">No DocBlock was found for method testAddParts_Insert()</error>
      <error line="415" code="50010">No DocBlock was found for method testBuildWhere_Simple()</error>
      <error line="421" code="50010">No DocBlock was found for method testBuildWhere_MoreThan()</error>
      <error line="427" code="50010">No DocBlock was found for method testBuildWhere_IsNull()</error>
      <error line="433" code="50010">No DocBlock was found for method testBuildWhere_In()</error>
      <error line="439" code="50010">No DocBlock was found for method testBuildWhere_Between()</error>
      <error line="445" code="50010">No DocBlock was found for method testBuildWhere_Like()</error>
      <error line="451" code="50010">No DocBlock was found for method testBuildWhere_TwoParams()</error>
      <error line="457" code="50010">No DocBlock was found for method testBuildWhere_Array()</error>
      <error line="463" code="50010">No DocBlock was found for method testBuildWhere_TwoParamsArray()</error>
      <error line="472" code="50010">No DocBlock was found for method testExtractSubsets_Select()</error>
      <error line="478" code="50010">No DocBlock was found for method testExtractSubsets_SelectSubqueryInWhere()</error>
      <error line="484" code="50010">No DocBlock was found for method testExtractSubsets_SelectSubqueryInJoin()</error>
      <error line="490" code="50010">No DocBlock was found for method testExtractSubsets_Insert()</error>
      <error line="496" code="50010">No DocBlock was found for method testExtractSubsets_InsertSubqueryInWhere()</error>
      <error line="505" code="50010">No DocBlock was found for method testSplit_Select()</error>
      <error line="511" code="50010">No DocBlock was found for method testSplit_Select_Simple()</error>
      <error line="517" code="50010">No DocBlock was found for method testSplit_Select_Advanced()</error>
      <error line="523" code="50010">No DocBlock was found for method testSplit_Select_Subquery()</error>
      <error line="529" code="50010">No DocBlock was found for method testSplit_Select_SubqueryMadness()</error>
      <error line="535" code="50010">No DocBlock was found for method testSplit_Select_Semicolon()</error>
      <error line="541" code="50010">No DocBlock was found for method testJoinSelect_Simple()</error>
      <error line="547" code="50010">No DocBlock was found for method testJoinSelect_Advanced()</error>
      <error line="553" code="50010">No DocBlock was found for method testJoinSelect_Subquery()</error>
      <error line="560" code="50010">No DocBlock was found for method testSplit_Insert()</error>
      <error line="566" code="50010">No DocBlock was found for method testSplit_InsertValuesSimple()</error>
      <error line="572" code="50010">No DocBlock was found for method testSplit_ReplaceValuesSimple()</error>
      <error line="578" code="50010">No DocBlock was found for method testSplit_InsertValuesColumns()</error>
      <error line="584" code="50010">No DocBlock was found for method testSplit_InsertValuesMultiple()</error>
      <error line="590" code="50010">No DocBlock was found for method testSplit_InsertSetSimple()</error>
      <error line="596" code="50010">No DocBlock was found for method testSplit_InsertSelectSimple()</error>
      <error line="602" code="50010">No DocBlock was found for method testSplit_InsertSelectSubquery()</error>
      <error line="608" code="50010">No DocBlock was found for method testJoinInsertValuesSimple()</error>
      <error line="614" code="50010">No DocBlock was found for method testJoinReplaceValuesSimple()</error>
      <error line="620" code="50010">No DocBlock was found for method testJoinInsertValuesColumns()</error>
      <error line="626" code="50010">No DocBlock was found for method testJoinInsertValuesMultiple()</error>
      <error line="632" code="50010">No DocBlock was found for method testJoinInsertSelectSimple()</error>
      <error line="638" code="50010">No DocBlock was found for method testJoinInsertSelectSubquery()</error>
      <error line="645" code="50010">No DocBlock was found for method testSplit_UpdateSimple()</error>
      <error line="651" code="50010">No DocBlock was found for method testSplit_UpdateAdvanced()</error>
      <error line="657" code="50010">No DocBlock was found for method testSplit_UpdateSubquery()</error>
      <error line="663" code="50010">No DocBlock was found for method testJoin_UpdateSimple()</error>
      <error line="669" code="50010">No DocBlock was found for method testJoin_UpdateAdvanced()</error>
      <error line="676" code="50010">No DocBlock was found for method testSplit_DeleteSimple()</error>
      <error line="682" code="50010">No DocBlock was found for method testSplit_DeleteAdvanced()</error>
      <error line="688" code="50010">No DocBlock was found for method testSplit_DeleteSubquery()</error>
      <error line="694" code="50010">No DocBlock was found for method testJoin_DeleteSimple()</error>
      <error line="700" code="50010">No DocBlock was found for method testJoin_DeleteAdvanced()</error>
      <error line="707" code="50010">No DocBlock was found for method testSplit_Truncate()</error>
      <error line="713" code="50010">No DocBlock was found for method testJoin_Truncate()</error>
      <error line="720" code="50010">No DocBlock was found for method testSplit_Set()</error>
      <error line="726" code="50010">No DocBlock was found for method testJoin_Set()</error>
      <error line="733" code="50010">No DocBlock was found for method testSplit_Fail()</error>
      <error line="742" code="50010">No DocBlock was found for method testSplitColumns_Simple()</error>
      <error line="748" code="50010">No DocBlock was found for method testSplitColumns_Advanced()</error>
      <error line="753" code="50010">No DocBlock was found for method testSplitColumns_Select()</error>
      <error line="759" code="50010">No DocBlock was found for method testSplitColumns_SelectSubquery()</error>
      <error line="765" code="50010">No DocBlock was found for method testSplitColumns_SelectSubFrom()</error>
      <error line="771" code="50010">No DocBlock was found for method testSplitColumns_SelectRealLifeExample()</error>
      <error line="777" code="50010">No DocBlock was found for method testSplitColumns_InsertValues()</error>
      <error line="783" code="50010">No DocBlock was found for method testSplitColumns_InsertSelect()</error>
      <error line="789" code="50010">No DocBlock was found for method testSplitColumns_Delete()</error>
      <error line="796" code="50010">No DocBlock was found for method testSplitSet()</error>
      <error line="802" code="50010">No DocBlock was found for method testSplitSet_Insert()</error>
      <error line="808" code="50010">No DocBlock was found for method testSplitSet_Update()</error>
      <error line="817" code="50010">No DocBlock was found for method testSplitTables_Simple()</error>
      <error line="823" code="50010">No DocBlock was found for method testSplitTables_Alias()</error>
      <error line="829" code="50010">No DocBlock was found for method testSplitTables_Join()</error>
      <error line="835" code="50010">No DocBlock was found for method testSplitTables_Subjoin()</error>
      <error line="841" code="50010">No DocBlock was found for method testSplitTables_Subquery()</error>
      <error line="847" code="50010">No DocBlock was found for method testSplitTables_Select()</error>
      <error line="853" code="50010">No DocBlock was found for method testSplitTables_InsertValues()</error>
      <error line="859" code="50010">No DocBlock was found for method testSplitTables_InsertSelect()</error>
      <error line="865" code="50010">No DocBlock was found for method testSplitTables_InsertSet()</error>
      <error line="871" code="50010">No DocBlock was found for method testSplitTables_Update()</error>
      <error line="877" code="50010">No DocBlock was found for method testSplitTables_Delete()</error>
      <error line="886" code="50010">No DocBlock was found for method testSplitLimit()</error>
      <error line="892" code="50010">No DocBlock was found for method testSplitLimit_Comma()</error>
      <error line="898" code="50010">No DocBlock was found for method testSplitLimit_Offset()</error>
      <error line="904" code="50010">No DocBlock was found for method testSplitLimit_Fail()</error>
      <error line="910" code="50010">No DocBlock was found for method testSplitLimit_Select()</error>
      <error line="916" code="50010">No DocBlock was found for method testSplitLimit_SelectNoLimit()</error>
      <error line="922" code="50010">No DocBlock was found for method testSplitLimit_Truncate()</error>
      <error line="931" code="50010">No DocBlock was found for method testBuildCountQuery_Simple()</error>
      <error line="937" code="50010">No DocBlock was found for method testBuildCountQuery_Select()</error>
      <error line="943" code="50010">No DocBlock was found for method testBuildCountQuery_Select_Offset()</error>
      <error line="949" code="50010">No DocBlock was found for method testBuildCountQuery_Select_AllRows()</error>
      <error line="955" code="50010">No DocBlock was found for method testBuildCountQuery_Distinct()</error>
      <error line="961" code="50010">No DocBlock was found for method testBuildCountQuery_GroupBy()</error>
      <error line="967" code="50010">No DocBlock was found for method testBuildCountQuery_Having()</error>
      <error line="973" code="50010">No DocBlock was found for method testBuildCountQuery_Update()</error>
      <error line="979" code="50010">No DocBlock was found for method testBuildCountQuery_Delete()</error>
      <error line="985" code="50010">No DocBlock was found for method testBuildCountQuery_DeleteJoin()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file test/src/DBQuery/SplitterTest.php</error>
    </parse_markers>
    <include line="3" type="Require Once" package="Default">
      <name>PHPUnit/Framework.php</name>
    </include>
    <include line="5" type="Require Once" package="Default">
      <name>/../../../src/DBQuery.php</name>
    </include>
    <include line="6" type="Require Once" package="Default">
      <name>/../../../src/DBQuery/Splitter.php</name>
    </include>
    <class final="false" abstract="false" namespace="default" line="15" package="Test\DBQuery">
      <name>DBQuery_SplitterTest</name>
      <full_name>\DBQuery_SplitterTest</full_name>
      <extends>\PHPUnit_Framework_TestCase</extends>
      <docblock line="9">
        <description><![CDATA[Test for DBQuery_Splitter.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="9" name="package" description="Test"/>
        <tag line="9" name="subpackage" description="DBQuery"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="20" package="">
        <name>cleanQuery</name>
        <type>function</type>
        <docblock line="17">
          <description><![CDATA[Helper function to remove spaces from a query.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="20">
          <name>$sql</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="27" package="">
        <name>testQuote_Null</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="32" package="">
        <name>testQuote_NullDefault</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="37" package="">
        <name>testQuote_Int</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="42" package="">
        <name>testQuote_Float</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="47" package="">
        <name>testQuote_True</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="52" package="">
        <name>testQuote_False</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="57" package="">
        <name>testQuote_String</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="62" package="">
        <name>testQuote_StringQuotes</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="67" package="">
        <name>testQuote_StringMultiline</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="72" package="">
        <name>testQuote_Array</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="78" package="">
        <name>testQuoteIdentifier_Simple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="83" package="">
        <name>testQuoteIdentifier_Quoted</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="88" package="">
        <name>testQuoteIdentifier_TableColumn</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="93" package="">
        <name>testQuoteIdentifier_TableColumn_Quoted</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="98" package="">
        <name>testQuoteIdentifier_WithAlias</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="103" package="">
        <name>testQuoteIdentifier_Function</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="108" package="">
        <name>testQuoteIdentifier_Cast</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="113" package="">
        <name>testQuoteIdentifier_Cast_Confuse</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="118" package="">
        <name>testQuoteIdentifier_Expression</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="123" package="">
        <name>testQuoteIdentifier_None</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="128" package="">
        <name>testQuoteIdentifier_Strict</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="133" package="">
        <name>testQuoteIdentifier_Strict_TableColumn</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="138" package="">
        <name>testQuoteIdentifier_Strict_Fail</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="145" package="">
        <name>testIsIdentifier_Simple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="150" package="">
        <name>testIsIdentifier_Quoted</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="155" package="">
        <name>testIsIdentifier_TableColumn</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="160" package="">
        <name>testIsIdentifier_TableColumn_Quoted</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="165" package="">
        <name>testIsIdentifier_Strange</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="170" package="">
        <name>testIsIdentifier_Strange_Quoted</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="175" package="">
        <name>testIsIdentifier_WithoutAlias_AsAlias</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="180" package="">
        <name>testIsIdentifier_WithoutAlias_SpaceAlias</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="188" package="">
        <name>testParse_Null</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="193" package="">
        <name>testParse_Integer</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="198" package="">
        <name>testParse_Float</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="203" package="">
        <name>testParse_Boolean</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="208" package="">
        <name>testParse_String</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="213" package="">
        <name>testParse_String_Confuse</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="218" package="">
        <name>testParse_String_Quote</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="223" package="">
        <name>testParse_String_Multiline</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="228" package="">
        <name>testParse_Array</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="233" package="">
        <name>testParse_Named</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="238" package="">
        <name>testParse_Like</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="243" package="">
        <name>testParse_Like_Named</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="249" package="">
        <name>testCountPlaceholders</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="254" package="">
        <name>testCountPlaceholders_Confuse</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="262" package="">
        <name>testGetQueryType_Select</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="267" package="">
        <name>testGetQueryType_Select_Word</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="272" package="">
        <name>testGetQueryType_Select_LowerCase</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="277" package="">
        <name>testGetQueryType_Select_Spaces</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="282" package="">
        <name>testGetQueryType_Insert</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="287" package="">
        <name>testGetQueryType_Replace</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="292" package="">
        <name>testGetQueryType_Delete</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="297" package="">
        <name>testGetQueryType_Truncate</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="302" package="">
        <name>testGetQueryType_AlterTable</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="307" package="">
        <name>testGetQueryType_AlterView_Spaces</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="312" package="">
        <name>testGetQueryType_AlterUnknown</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="317" package="">
        <name>testGetQueryType_Set</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="322" package="">
        <name>testGetQueryType_Begin</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="327" package="">
        <name>testGetQueryType_LoadDataInfile</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="332" package="">
        <name>testGetQueryType_Comment</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="337" package="">
        <name>testGetQueryType_Unknown</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="343" package="">
        <name>testHoldsIdentifiers_From</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="348" package="">
        <name>testHoldsIdentifiers_Select</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="356" package="">
        <name>testAddParts_Simple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="365" package="">
        <name>testAddParts_Split</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="372" package="">
        <name>testAddParts_Append</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="389" package="">
        <name>testAddParts_Full</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="405" package="">
        <name>testAddParts_Insert</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="415" package="">
        <name>testBuildWhere_Simple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="421" package="">
        <name>testBuildWhere_MoreThan</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="427" package="">
        <name>testBuildWhere_IsNull</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="433" package="">
        <name>testBuildWhere_In</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="439" package="">
        <name>testBuildWhere_Between</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="445" package="">
        <name>testBuildWhere_Like</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="451" package="">
        <name>testBuildWhere_TwoParams</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="457" package="">
        <name>testBuildWhere_Array</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="463" package="">
        <name>testBuildWhere_TwoParamsArray</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="472" package="">
        <name>testExtractSubsets_Select</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="478" package="">
        <name>testExtractSubsets_SelectSubqueryInWhere</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="484" package="">
        <name>testExtractSubsets_SelectSubqueryInJoin</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="490" package="">
        <name>testExtractSubsets_Insert</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="496" package="">
        <name>testExtractSubsets_InsertSubqueryInWhere</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="505" package="">
        <name>testSplit_Select</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="511" package="">
        <name>testSplit_Select_Simple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="517" package="">
        <name>testSplit_Select_Advanced</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="523" package="">
        <name>testSplit_Select_Subquery</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="529" package="">
        <name>testSplit_Select_SubqueryMadness</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="535" package="">
        <name>testSplit_Select_Semicolon</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="541" package="">
        <name>testJoinSelect_Simple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="547" package="">
        <name>testJoinSelect_Advanced</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="553" package="">
        <name>testJoinSelect_Subquery</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="560" package="">
        <name>testSplit_Insert</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="566" package="">
        <name>testSplit_InsertValuesSimple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="572" package="">
        <name>testSplit_ReplaceValuesSimple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="578" package="">
        <name>testSplit_InsertValuesColumns</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="584" package="">
        <name>testSplit_InsertValuesMultiple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="590" package="">
        <name>testSplit_InsertSetSimple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="596" package="">
        <name>testSplit_InsertSelectSimple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="602" package="">
        <name>testSplit_InsertSelectSubquery</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="608" package="">
        <name>testJoinInsertValuesSimple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="614" package="">
        <name>testJoinReplaceValuesSimple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="620" package="">
        <name>testJoinInsertValuesColumns</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="626" package="">
        <name>testJoinInsertValuesMultiple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="632" package="">
        <name>testJoinInsertSelectSimple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="638" package="">
        <name>testJoinInsertSelectSubquery</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="645" package="">
        <name>testSplit_UpdateSimple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="651" package="">
        <name>testSplit_UpdateAdvanced</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="657" package="">
        <name>testSplit_UpdateSubquery</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="663" package="">
        <name>testJoin_UpdateSimple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="669" package="">
        <name>testJoin_UpdateAdvanced</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="676" package="">
        <name>testSplit_DeleteSimple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="682" package="">
        <name>testSplit_DeleteAdvanced</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="688" package="">
        <name>testSplit_DeleteSubquery</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="694" package="">
        <name>testJoin_DeleteSimple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="700" package="">
        <name>testJoin_DeleteAdvanced</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="707" package="">
        <name>testSplit_Truncate</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="713" package="">
        <name>testJoin_Truncate</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="720" package="">
        <name>testSplit_Set</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="726" package="">
        <name>testJoin_Set</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="733" package="">
        <name>testSplit_Fail</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="742" package="">
        <name>testSplitColumns_Simple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="748" package="">
        <name>testSplitColumns_Advanced</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="753" package="">
        <name>testSplitColumns_Select</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="759" package="">
        <name>testSplitColumns_SelectSubquery</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="765" package="">
        <name>testSplitColumns_SelectSubFrom</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="771" package="">
        <name>testSplitColumns_SelectRealLifeExample</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="777" package="">
        <name>testSplitColumns_InsertValues</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="783" package="">
        <name>testSplitColumns_InsertSelect</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="789" package="">
        <name>testSplitColumns_Delete</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="796" package="">
        <name>testSplitSet</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="802" package="">
        <name>testSplitSet_Insert</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="808" package="">
        <name>testSplitSet_Update</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="817" package="">
        <name>testSplitTables_Simple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="823" package="">
        <name>testSplitTables_Alias</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="829" package="">
        <name>testSplitTables_Join</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="835" package="">
        <name>testSplitTables_Subjoin</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="841" package="">
        <name>testSplitTables_Subquery</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="847" package="">
        <name>testSplitTables_Select</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="853" package="">
        <name>testSplitTables_InsertValues</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="859" package="">
        <name>testSplitTables_InsertSelect</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="865" package="">
        <name>testSplitTables_InsertSet</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="871" package="">
        <name>testSplitTables_Update</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="877" package="">
        <name>testSplitTables_Delete</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="886" package="">
        <name>testSplitLimit</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="892" package="">
        <name>testSplitLimit_Comma</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="898" package="">
        <name>testSplitLimit_Offset</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="904" package="">
        <name>testSplitLimit_Fail</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="910" package="">
        <name>testSplitLimit_Select</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="916" package="">
        <name>testSplitLimit_SelectNoLimit</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="922" package="">
        <name>testSplitLimit_Truncate</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="931" package="">
        <name>testBuildCountQuery_Simple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="937" package="">
        <name>testBuildCountQuery_Select</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="943" package="">
        <name>testBuildCountQuery_Select_Offset</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="949" package="">
        <name>testBuildCountQuery_Select_AllRows</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="955" package="">
        <name>testBuildCountQuery_Distinct</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="961" package="">
        <name>testBuildCountQuery_GroupBy</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="967" package="">
        <name>testBuildCountQuery_Having</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="973" package="">
        <name>testBuildCountQuery_Update</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="979" package="">
        <name>testBuildCountQuery_Delete</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="985" package="">
        <name>testBuildCountQuery_DeleteJoin</name>
        <type>function</type>
      </method>
    </class>
  </file>
  <file path="test/src/DBQueryTest.php" hash="92111be5eaafac14ecf11ee988e89acc" package="Misc">
    <parse_markers>
      <error line="17" code="50015">Argument $sql is missing from the Docblock of cleanQuery()</error>
      <error line="25" code="50010">No DocBlock was found for method testSelectStatement_AddColumn()</error>
      <error line="32" code="50010">No DocBlock was found for method testSelectStatement_AddColumn_Prepend()</error>
      <error line="39" code="50010">No DocBlock was found for method testSelectStatement_AddColumn_Replace()</error>
      <error line="46" code="50010">No DocBlock was found for method testSelectStatement_AddTable()</error>
      <error line="53" code="50010">No DocBlock was found for method testSelectStatement_AddTable_LeftJoin()</error>
      <error line="60" code="50010">No DocBlock was found for method testSelectStatement_AddTable_AsString()</error>
      <error line="67" code="50010">No DocBlock was found for method testSelectStatement_AddTable_StraightJoin()</error>
      <error line="74" code="50010">No DocBlock was found for method testSelectStatement_AddTable_Replace()</error>
      <error line="81" code="50010">No DocBlock was found for method testSelectStatement_AddTable_Prepend()</error>
      <error line="88" code="50010">No DocBlock was found for method testSelectStatement_Where_Simple()</error>
      <error line="95" code="50010">No DocBlock was found for method testSelectStatement_Where()</error>
      <error line="102" code="50010">No DocBlock was found for method testSelectStatement_Where_Prepend()</error>
      <error line="109" code="50010">No DocBlock was found for method testSelectStatement_Where_Replace()</error>
      <error line="117" code="50010">No DocBlock was found for method testSelectStatement_Having()</error>
      <error line="124" code="50010">No DocBlock was found for method testSelectStatement_GroupBy_Simple()</error>
      <error line="131" code="50010">No DocBlock was found for method testSelectStatement_GroupBy()</error>
      <error line="138" code="50010">No DocBlock was found for method testSelectStatement_OrderBy_Simple()</error>
      <error line="145" code="50010">No DocBlock was found for method testSelectStatement_OrderBy()</error>
      <error line="152" code="50010">No DocBlock was found for method testSelectStatement_OrderBy_Append()</error>
      <error line="159" code="50010">No DocBlock was found for method testSelectStatement_WhereCriteria_Equals()</error>
      <error line="166" code="50010">No DocBlock was found for method testSelectStatement_WhereCriteria_GreatEq()</error>
      <error line="173" code="50010">No DocBlock was found for method testSelectStatement_WhereCriteria_Or()</error>
      <error line="180" code="50010">No DocBlock was found for method testSelectStatement_WhereCriteria_In()</error>
      <error line="187" code="50010">No DocBlock was found for method testSelectStatement_WhereCriteria_Between()</error>
      <error line="194" code="50010">No DocBlock was found for method testSelectStatement_WhereCriteria_LikeWildcard()</error>
      <error line="201" code="50010">No DocBlock was found for method testSelectStatement_Limit()</error>
      <error line="208" code="50010">No DocBlock was found for method testSelectStatement_Limit_Replace()</error>
      <error line="215" code="50010">No DocBlock was found for method testSelectStatement_Limit_String()</error>
      <error line="225" code="50010">No DocBlock was found for method testInsertStatement_AddSet()</error>
      <error line="232" code="50010">No DocBlock was found for method testInsertStatement_AddValues_String()</error>
      <error line="239" code="50010">No DocBlock was found for method testInsertStatement_AddValues_Array()</error>
      <error line="250" code="50010">No DocBlock was found for method testUpdateStatement_AddSet_Simple()</error>
      <error line="257" code="50010">No DocBlock was found for method testUpdateStatement_AddSet()</error>
      <error line="264" code="50010">No DocBlock was found for method testUpdateStatement_AddSet_Replace()</error>
      <error line="271" code="50010">No DocBlock was found for method testUpdateStatement_AddTable()</error>
      <error line="278" code="50010">No DocBlock was found for method testUpdateStatement_AddTable_String()</error>
      <error line="285" code="50010">No DocBlock was found for method testUpdateStatement_AddTable_StraightJoin()</error>
      <error line="292" code="50010">No DocBlock was found for method testUpdateStatement_AddTable_Replace()</error>
      <error line="299" code="50010">No DocBlock was found for method testUpdateStatement_AddTable_Prepend()</error>
      <error line="306" code="50010">No DocBlock was found for method testUpdateStatement_Where_Simple()</error>
      <error line="313" code="50010">No DocBlock was found for method testUpdateStatement_Where()</error>
      <error line="320" code="50010">No DocBlock was found for method testUpdateStatement_Where_Prepend()</error>
      <error line="327" code="50010">No DocBlock was found for method testUpdateStatement_Where_Replace()</error>
      <error line="335" code="50010">No DocBlock was found for method testUpdateStatement_WhereCriteria()</error>
      <error line="342" code="50010">No DocBlock was found for method testUpdateStatement_Limit()</error>
      <error line="352" code="50010">No DocBlock was found for method testDeleteStatement_AddColumn()</error>
      <error line="359" code="50010">No DocBlock was found for method testDeleteStatement_AddTable()</error>
      <error line="366" code="50010">No DocBlock was found for method testDeleteStatement_AddTable_String()</error>
      <error line="373" code="50010">No DocBlock was found for method testDeleteStatement_AddTable_StraightJoin()</error>
      <error line="380" code="50010">No DocBlock was found for method testDeleteStatement_AddTable_Replace()</error>
      <error line="387" code="50010">No DocBlock was found for method testDeleteStatement_AddTable_Prepend()</error>
      <error line="394" code="50010">No DocBlock was found for method testDeleteStatement_Where_Simple()</error>
      <error line="401" code="50010">No DocBlock was found for method testDeleteStatement_Where()</error>
      <error line="408" code="50010">No DocBlock was found for method testDeleteStatement_Where_Prepend()</error>
      <error line="415" code="50010">No DocBlock was found for method testDeleteStatement_Where_Replace()</error>
      <error line="423" code="50010">No DocBlock was found for method testDeleteStatement_WhereCriteria()</error>
      <error line="430" code="50010">No DocBlock was found for method testDeleteStatement_Limit()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file test/src/DBQueryTest.php</error>
    </parse_markers>
    <include line="3" type="Require Once" package="Default">
      <name>PHPUnit/Framework.php</name>
    </include>
    <include line="5" type="Require Once" package="Default">
      <name>/../../src/DBQuery.php</name>
    </include>
    <include line="6" type="Require Once" package="Default">
      <name>/../../src/DBQuery/Splitter.php</name>
    </include>
    <class final="false" abstract="false" namespace="default" line="15" package="Test\DBQuery">
      <name>DBQueryTest</name>
      <full_name>\DBQueryTest</full_name>
      <extends>\PHPUnit_Framework_TestCase</extends>
      <docblock line="9">
        <description><![CDATA[Test for modifing DBQuery objects.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="9" name="package" description="Test"/>
        <tag line="9" name="subpackage" description="DBQuery"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="20" package="">
        <name>cleanQuery</name>
        <type>function</type>
        <docblock line="17">
          <description><![CDATA[Helper function to remove spaces from a query.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="20">
          <name>$sql</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="25" package="">
        <name>testSelectStatement_AddColumn</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="32" package="">
        <name>testSelectStatement_AddColumn_Prepend</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="39" package="">
        <name>testSelectStatement_AddColumn_Replace</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="46" package="">
        <name>testSelectStatement_AddTable</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="53" package="">
        <name>testSelectStatement_AddTable_LeftJoin</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="60" package="">
        <name>testSelectStatement_AddTable_AsString</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="67" package="">
        <name>testSelectStatement_AddTable_StraightJoin</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="74" package="">
        <name>testSelectStatement_AddTable_Replace</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="81" package="">
        <name>testSelectStatement_AddTable_Prepend</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="88" package="">
        <name>testSelectStatement_Where_Simple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="95" package="">
        <name>testSelectStatement_Where</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="102" package="">
        <name>testSelectStatement_Where_Prepend</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="109" package="">
        <name>testSelectStatement_Where_Replace</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="117" package="">
        <name>testSelectStatement_Having</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="124" package="">
        <name>testSelectStatement_GroupBy_Simple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="131" package="">
        <name>testSelectStatement_GroupBy</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="138" package="">
        <name>testSelectStatement_OrderBy_Simple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="145" package="">
        <name>testSelectStatement_OrderBy</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="152" package="">
        <name>testSelectStatement_OrderBy_Append</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="159" package="">
        <name>testSelectStatement_WhereCriteria_Equals</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="166" package="">
        <name>testSelectStatement_WhereCriteria_GreatEq</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="173" package="">
        <name>testSelectStatement_WhereCriteria_Or</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="180" package="">
        <name>testSelectStatement_WhereCriteria_In</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="187" package="">
        <name>testSelectStatement_WhereCriteria_Between</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="194" package="">
        <name>testSelectStatement_WhereCriteria_LikeWildcard</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="201" package="">
        <name>testSelectStatement_Limit</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="208" package="">
        <name>testSelectStatement_Limit_Replace</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="215" package="">
        <name>testSelectStatement_Limit_String</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="225" package="">
        <name>testInsertStatement_AddSet</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="232" package="">
        <name>testInsertStatement_AddValues_String</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="239" package="">
        <name>testInsertStatement_AddValues_Array</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="250" package="">
        <name>testUpdateStatement_AddSet_Simple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="257" package="">
        <name>testUpdateStatement_AddSet</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="264" package="">
        <name>testUpdateStatement_AddSet_Replace</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="271" package="">
        <name>testUpdateStatement_AddTable</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="278" package="">
        <name>testUpdateStatement_AddTable_String</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="285" package="">
        <name>testUpdateStatement_AddTable_StraightJoin</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="292" package="">
        <name>testUpdateStatement_AddTable_Replace</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="299" package="">
        <name>testUpdateStatement_AddTable_Prepend</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="306" package="">
        <name>testUpdateStatement_Where_Simple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="313" package="">
        <name>testUpdateStatement_Where</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="320" package="">
        <name>testUpdateStatement_Where_Prepend</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="327" package="">
        <name>testUpdateStatement_Where_Replace</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="335" package="">
        <name>testUpdateStatement_WhereCriteria</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="342" package="">
        <name>testUpdateStatement_Limit</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="352" package="">
        <name>testDeleteStatement_AddColumn</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="359" package="">
        <name>testDeleteStatement_AddTable</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="366" package="">
        <name>testDeleteStatement_AddTable_String</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="373" package="">
        <name>testDeleteStatement_AddTable_StraightJoin</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="380" package="">
        <name>testDeleteStatement_AddTable_Replace</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="387" package="">
        <name>testDeleteStatement_AddTable_Prepend</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="394" package="">
        <name>testDeleteStatement_Where_Simple</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="401" package="">
        <name>testDeleteStatement_Where</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="408" package="">
        <name>testDeleteStatement_Where_Prepend</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="415" package="">
        <name>testDeleteStatement_Where_Replace</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="423" package="">
        <name>testDeleteStatement_WhereCriteria</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="430" package="">
        <name>testDeleteStatement_Limit</name>
        <type>function</type>
      </method>
    </class>
  </file>
  <file path="src/DBQuery/Splitter.php" hash="2c10304d0206deb016d8f109d5dd31da" package="DBQuery">
    <docblock line="3">
      <description><![CDATA[Break down a mysql query statement to different parts, which can be altered and joined again.]]></description>
      <long-description><![CDATA[<p>Supported types: SELECT, INSERT, REPLACE, UPDATE, DELETE, TRUNCATE.</p>

<p>SELECT ... UNION syntax is <em>not</em> supported.
DELETE ... USING syntax is <em>not</em> supported.
Invalid query statements might give unexpected results.</p>

<p>All methods of this class are static.</p>

<p>{ @internal
  This class highly depends on complicated PCRE regular expressions. So if your not really really really good at reading/writing these, don't touch this class.
  To prevent a regex getting in some crazy (or catastrophic) backtracking loop, use regexbuddy (http://www.regexbuddy.com) or some other step-by-step regex debugger.
  The performance of each function is really important, since these functions will be called a lot in 1 page and should be concidered abstraction overhead. The focus is on performance not readability of the code.</p>

<p>Expression REGEX_VALUES matches all quoted strings, all backquoted identifiers and all words and all non-word chars upto the next keyword.
  It uses atomic groups to look for the next keyword after each quoted string and complete word, not after each char. Atomic groups are also neccesary to prevent catastrophic backtracking when the regex should fail.</p>

<p>Expressions like '/\w+\s<em>(abc)?\s</em>\w+z/' should be prevented. If this regex would try to match "ef    ghi", the regex will first take all 3 spaces for the first \s*. When the regex fails it retries taking the
    first 2 spaces for the first \s* and the 3rd space for the second \s*, etc, etc. This causes the matching to take more than 3 times as long as '/\w+\s<em>(abc\s</em>)?\w+z/' would.
  This is the reason why trailing spaces are included with REGEX_VALUES and not automaticly trimmed.
}}</p>]]></long-description>
      <tag line="3" name="package" description="DBQuery"/>
      <tag line="3" name="todo" description="It might be possible to use recursion instead of extracting subqueries, using \((SELECT\b)(?R)\). For query other that select, I should do (?:^\s++UPDATE ...|(?&lt;!^)\s++SELECT ...) to match SELECT and not UPDATE statement in recursion."/>
      <tag line="3" name="todo" description="Implement splitValues to get values of INSERT INTO ... VALUES ... statement"/>
    </docblock>
    <class final="false" abstract="false" namespace="default" line="31" package="DBQuery">
      <name>DBQuery_Splitter</name>
      <full_name>\DBQuery_Splitter</full_name>
      <extends/>
      <docblock line="3">
        <description><![CDATA[Break down a mysql query statement to different parts, which can be altered and joined again.]]></description>
        <long-description><![CDATA[<p>Supported types: SELECT, INSERT, REPLACE, UPDATE, DELETE, TRUNCATE.</p>

<p>SELECT ... UNION syntax is <em>not</em> supported.
DELETE ... USING syntax is <em>not</em> supported.
Invalid query statements might give unexpected results.</p>

<p>All methods of this class are static.</p>

<p>{ @internal
  This class highly depends on complicated PCRE regular expressions. So if your not really really really good at reading/writing these, don't touch this class.
  To prevent a regex getting in some crazy (or catastrophic) backtracking loop, use regexbuddy (http://www.regexbuddy.com) or some other step-by-step regex debugger.
  The performance of each function is really important, since these functions will be called a lot in 1 page and should be concidered abstraction overhead. The focus is on performance not readability of the code.</p>

<p>Expression REGEX_VALUES matches all quoted strings, all backquoted identifiers and all words and all non-word chars upto the next keyword.
  It uses atomic groups to look for the next keyword after each quoted string and complete word, not after each char. Atomic groups are also neccesary to prevent catastrophic backtracking when the regex should fail.</p>

<p>Expressions like '/\w+\s<em>(abc)?\s</em>\w+z/' should be prevented. If this regex would try to match "ef    ghi", the regex will first take all 3 spaces for the first \s*. When the regex fails it retries taking the
    first 2 spaces for the first \s* and the 3rd space for the second \s*, etc, etc. This causes the matching to take more than 3 times as long as '/\w+\s<em>(abc\s</em>)?\w+z/' would.
  This is the reason why trailing spaces are included with REGEX_VALUES and not automaticly trimmed.
}}</p>]]></long-description>
        <tag line="3" name="package" description="DBQuery"/>
        <tag line="3" name="todo" description="It might be possible to use recursion instead of extracting subqueries, using \((SELECT\b)(?R)\). For query other that select, I should do (?:^\s++UPDATE ...|(?&lt;!^)\s++SELECT ...) to match SELECT and not UPDATE statement in recursion."/>
        <tag line="3" name="todo" description="Implement splitValues to get values of INSERT INTO ... VALUES ... statement"/>
      </docblock>
      <constant namespace="default" line="33" package="Misc">
        <name>REGEX_VALUES</name>
        <value><![CDATA['(?:\w++|`[^`]*+`|"(?:[^"\\\\]++|\\\\.)*+"|\'(?:[^\'\\\\]++|\\\\.)*+\'|\s++|[^`"\'\w\s])*?']]></value>
      </constant>
      <constant namespace="default" line="34" package="Misc">
        <name>REGEX_IDENTIFIER</name>
        <value><![CDATA['(?:(?:\w++|`[^`]*+`)(?:\.(?:\w++|`[^`]*+`)){0,2})']]></value>
      </constant>
      <constant namespace="default" line="35" package="Misc">
        <name>REGEX_QUOTED</name>
        <value><![CDATA['(?:`[^`]*+`|"(?:[^"\\\\]++|\\\\.)*+"|\'(?:[^\'\\\\]++|\\\\.)*+\')']]></value>
      </constant>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="46" package="">
        <name>quote</name>
        <type>function</type>
        <docblock line="39">
          <description><![CDATA[Quote a value so it can be savely used in a query.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="39" name="param" description="Return $empty if $value is null" type="string" variable="$empty">
            <type by_reference="false">string</type>
          </tag>
          <tag line="39" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="46">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="46">
          <name>$empty</name>
          <default><![CDATA['NULL']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="73" package="">
        <name>quoteIdentifier</name>
        <type>function</type>
        <docblock line="61">
          <description><![CDATA[Quotes a string so it can be used as a table or column name.]]></description>
          <long-description><![CDATA[<p>Dots are seen as seperator and are kept out of quotes.</p>

<p>Doesn't quote expressions without DBQuery::QUOTE_STRICT. This means it is not secure without this option.</p>]]></long-description>
          <tag line="61" name="param" description="" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="61" name="param" description="DBQuery::QUOTE_%" type="int" variable="$flags">
            <type by_reference="false">int</type>
          </tag>
          <tag line="61" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="61" name="todo" description="Cleanup misquoted TRIM function"/>
        </docblock>
        <argument line="73">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="73">
          <name>$flags</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="default" line="105" package="">
        <name>quoteIdentifier_ab</name>
        <type>function</type>
        <docblock line="98">
          <description><![CDATA[Callback function for quoteIdentifier.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="98" name="ignore" description=""/>
          <tag line="98" name="param" description="" type="array" variable="$match">
            <type by_reference="false">array</type>
          </tag>
          <tag line="98" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="105">
          <name>$match</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="default" line="117" package="">
        <name>quoteIdentifier_castCleanup</name>
        <type>function</type>
        <docblock line="110">
          <description><![CDATA[Unquote up quoted types of CAST function.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="110" name="ignore" description=""/>
          <tag line="110" name="param" description="Match or identifier" type="string|array" variable="$match">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="110" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="117">
          <name>$match</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="134" package="">
        <name>isIdentifier</name>
        <type>function</type>
        <docblock line="128">
          <description><![CDATA[Check if expression is a field/table name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="128" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="128" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="134">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="147" package="">
        <name>parse</name>
        <type>function</type>
        <docblock line="139">
          <description><![CDATA[Insert parameters into SQL query.]]></description>
          <long-description><![CDATA[<p>Don't mix unnamed ('?') and named (':key') placeholders.</p>]]></long-description>
          <tag line="139" name="param" description="Query string or DBQuery::Statement object" type="mixed" variable="$statement">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="139" name="param" description="Parameters to parse into statement on placeholders" type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="139" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="147">
          <name>$statement</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="147">
          <name>$params</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="167" package="">
        <name>countPlaceholders</name>
        <type>function</type>
        <docblock line="161">
          <description><![CDATA[Count the number of placeholders in a statement.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="161" name="param" description="" type="string" variable="$statement">
            <type by_reference="false">string</type>
          </tag>
          <tag line="161" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="167">
          <name>$statement</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="184" package="">
        <name>getQueryType</name>
        <type>function</type>
        <docblock line="178">
          <description><![CDATA[Return the type of the query.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="178" name="param" description="SQL query statement (or an array with parts)" type="string" variable="$sql">
            <type by_reference="false">string</type>
          </tag>
          <tag line="178" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="184">
          <name>$sql</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="203" package="">
        <name>holdsIdentifiers</name>
        <type>function</type>
        <docblock line="197">
          <description><![CDATA[Returns true if part can hold identifiers.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="197" name="param" description="" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="197" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="203">
          <name>$key</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="215" package="">
        <name>addParts</name>
        <type>function</type>
        <docblock line="208">
          <description><![CDATA[Add parts to existing statement]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="208" name="param" description="Parts (array) or statement (string)" type="array|string" variable="$sql">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="208" name="param" description="Parts to add as array(key=&gt;array(DBQuery::PREPEND=&gt;array(), DBQuery::APPEND=&gt;array(), ...)" type="array" variable="$add">
            <type by_reference="false">array</type>
          </tag>
          <tag line="208" name="return" description="" type="array|string">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="215">
          <name>$sql</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="215">
          <name>$add</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="251" package="">
        <name>buildWhere</name>
        <type>function</type>
        <docblock line="243">
          <description><![CDATA[Build a where expression.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="243" name="param" description="Expression, column name, column number, expression with placeholders or array(column=&gt;value, ...)" type="mixed" variable="$column">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="243" name="param" description="Value or array of values" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="243" name="param" description="DBQuery::QUOTE_%" type="int" variable="$flags">
            <type by_reference="false">int</type>
          </tag>
          <tag line="243" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="251">
          <name>$column</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="251">
          <name>$value</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="251">
          <name>$flags</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="290" package="">
        <name>extractSubsets</name>
        <type>function</type>
        <docblock line="280">
          <description><![CDATA[Extract subqueries from sql query (on for SELECT queries) and replace them with #subX in the main query.]]></description>
          <long-description><![CDATA[<p>Returns array(main query, subquery1, [subquery2, ...])</p>]]></long-description>
          <tag line="280" name="param" description="" type="string" variable="$sql">
            <type by_reference="false">string</type>
          </tag>
          <tag line="280" name="param" description="Do not use!" type="array" variable="$sets">
            <type by_reference="false">array</type>
          </tag>
          <tag line="280" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="280" name="todo" description="Extract subsets should only go 1 level deep"/>
        </docblock>
        <argument line="290">
          <name>$sql</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="290">
          <name>$sets</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="334" package="">
        <name>injectSubsets</name>
        <type>function</type>
        <docblock line="328">
          <description><![CDATA[Inject extracted subsets back into main sql query.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="328" name="param" description="array(main query, subquery, ...) or array(main parts, subparts, ...); may be passed by reference" type="array" variable="$sets">
            <type by_reference="false">array</type>
          </tag>
          <tag line="328" name="return" description="" type="string|array">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="334">
          <name>$sets</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="364" package="">
        <name>split</name>
        <type>function</type>
        <docblock line="357">
          <description><![CDATA[Split a query.]]></description>
          <long-description><![CDATA[<p>If a part is not set whitin the SQL query, the part is an empty string.</p>]]></long-description>
          <tag line="357" name="param" description="SQL query statement" type="string" variable="$sql">
            <type by_reference="false">string</type>
          </tag>
          <tag line="357" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="364">
          <name>$sql</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="389" package="">
        <name>join</name>
        <type>function</type>
        <docblock line="380">
          <description><![CDATA[Join parts to create a query.]]></description>
          <long-description><![CDATA[<p>The parts are joined in the order in which they appear in the array.</p>

<p>CAUTION: The parts are joined blindly (no validation), so shit in shit out</p>]]></long-description>
          <tag line="380" name="param" description="" type="array" variable="$parts">
            <type by_reference="false">array</type>
          </tag>
          <tag line="380" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="389">
          <name>$parts</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="default" line="412" package="">
        <name>splitSelectQuery</name>
        <type>function</type>
        <docblock line="405">
          <description><![CDATA[Split select query.]]></description>
          <long-description><![CDATA[<p>NOTE: Splitting a query with a subquery is considerably slower.</p>]]></long-description>
          <tag line="405" name="param" description="SQL SELECT query statement" type="string" variable="$sql">
            <type by_reference="false">string</type>
          </tag>
          <tag line="405" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="412">
          <name>$sql</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="default" line="454" package="">
        <name>splitInsertQuery</name>
        <type>function</type>
        <docblock line="448">
          <description><![CDATA[Split insert/replace query.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="448" name="param" description="SQL INSERT query statement" type="string" variable="$sql">
            <type by_reference="false">string</type>
          </tag>
          <tag line="448" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="454">
          <name>$sql</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="default" line="480" package="">
        <name>splitUpdateQuery</name>
        <type>function</type>
        <docblock line="474">
          <description><![CDATA[Split update query]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="474" name="param" description="SQL UPDATE query statement" type="string" variable="$sql">
            <type by_reference="false">string</type>
          </tag>
          <tag line="474" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="480">
          <name>$sql</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="default" line="516" package="">
        <name>splitDeleteQuery</name>
        <type>function</type>
        <docblock line="510">
          <description><![CDATA[Split delete query.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="510" name="param" description="SQL DELETE query statement" type="string" variable="$sql">
            <type by_reference="false">string</type>
          </tag>
          <tag line="510" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="516">
          <name>$sql</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="default" line="553" package="">
        <name>splitTruncateQuery</name>
        <type>function</type>
        <docblock line="547">
          <description><![CDATA[Split delete query]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="547" name="param" description="SQL DELETE query statement" type="string" variable="$sql">
            <type by_reference="false">string</type>
          </tag>
          <tag line="547" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="553">
          <name>$sql</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="default" line="574" package="">
        <name>splitSetQuery</name>
        <type>function</type>
        <docblock line="568">
          <description><![CDATA[Split set query]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="568" name="param" description="SQL SET query statement" type="string" variable="$sql">
            <type by_reference="false">string</type>
          </tag>
          <tag line="568" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="574">
          <name>$sql</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="599" package="">
        <name>splitColumns</name>
        <type>function</type>
        <docblock line="592">
          <description><![CDATA[Return the columns of a (partual) query statement.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="592" name="param" description="SQL query or 'column, column, ...'" type="string" variable="$sql">
            <type by_reference="false">string</type>
          </tag>
          <tag line="592" name="param" description="DBQuery::SPLIT_% option" type="int" variable="$flags">
            <type by_reference="false">int</type>
          </tag>
          <tag line="592" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="599">
          <name>$sql</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="599">
          <name>$flags</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="629" package="">
        <name>splitSet</name>
        <type>function</type>
        <docblock line="622">
          <description><![CDATA[Return the columns of a (partual) query statement.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="622" name="param" description="SQL query or 'column, column, ...'" type="string" variable="$sql">
            <type by_reference="false">string</type>
          </tag>
          <tag line="622" name="param" description="DBQuery::SPLIT_% option" type="int" variable="$flags">
            <type by_reference="false">int</type>
          </tag>
          <tag line="622" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="629">
          <name>$sql</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="629">
          <name>$flags</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="663" package="">
        <name>splitTables</name>
        <type>function</type>
        <docblock line="657">
          <description><![CDATA[Return the table names of a (partual) query statement.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="657" name="param" description="SQL query or FROM part" type="string" variable="$sql">
            <type by_reference="false">string</type>
          </tag>
          <tag line="657" name="return" description="array(alias/name =&gt; table)" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="663">
          <name>$sql</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="704" package="">
        <name>splitLimit</name>
        <type>function</type>
        <docblock line="697">
          <description><![CDATA[Split limit in array(limit, offset)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="697" name="param" description="SQL query or limit part" type="string" variable="$sql">
            <type by_reference="false">string</type>
          </tag>
          <tag line="697" name="param" description="" type="int" variable="$flags">
            <type by_reference="false">int</type>
          </tag>
          <tag line="697" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="704">
          <name>$sql</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="704">
          <name>$flags</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="732" package="">
        <name>buildCountQuery</name>
        <type>function</type>
        <docblock line="725">
          <description><![CDATA[Build query to count the number of rows]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="725" name="param" description="Statement" type="mixed" variable="$sql">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="725" name="param" description="Optional DBQuery::ALL_ROWS" type="bool" variable="$flags">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="725" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="732">
          <name>$sql</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="732">
          <name>$flags</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="src/DBQuery.php" hash="040f2b13c34c401397310fad3a08afa5" package="DBQuery">
    <docblock line="3">
      <description><![CDATA[Query builder for MySQL query statements.]]></description>
      <long-description><![CDATA[<p>All editing statements support fluent interfaces.</p>]]></long-description>
      <tag line="3" name="package" description="DBQuery"/>
    </docblock>
    <parse_markers>
      <notice line="118" code="50013">Parameter $subset could not be found in getType()</notice>
      <error line="496" code="50014">Name of argument $flags does not match with the DocBlock's name $flag in having()</error>
      <notice line="496" code="50013">Parameter $flag could not be found in having()</notice>
    </parse_markers>
    <class final="false" abstract="false" namespace="default" line="9" package="DBQuery">
      <name>DBQuery</name>
      <full_name>\DBQuery</full_name>
      <extends/>
      <docblock line="3">
        <description><![CDATA[Query builder for MySQL query statements.]]></description>
        <long-description><![CDATA[<p>All editing statements support fluent interfaces.</p>]]></long-description>
        <tag line="3" name="package" description="DBQuery"/>
      </docblock>
      <constant namespace="default" line="12" package="Misc">
        <name>PREPEND</name>
        <value><![CDATA[1]]></value>
        <docblock line="11">
          <description><![CDATA[Prepend to part]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="14" package="Misc">
        <name>APPEND</name>
        <value><![CDATA[2]]></value>
        <docblock line="13">
          <description><![CDATA[Append to part]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="16" package="Misc">
        <name>REPLACE</name>
        <value><![CDATA[4]]></value>
        <docblock line="15">
          <description><![CDATA[Replace part]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="19" package="Misc">
        <name>QUOTE_NONE</name>
        <value><![CDATA[0x100]]></value>
        <docblock line="18">
          <description><![CDATA[Don't quote identifiers at all]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="21" package="Misc">
        <name>QUOTE_LOOSE</name>
        <value><![CDATA[0x200]]></value>
        <docblock line="20">
          <description><![CDATA[Quote identifiers inside expressions]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="23" package="Misc">
        <name>QUOTE_STRICT</name>
        <value><![CDATA[0x400]]></value>
        <docblock line="22">
          <description><![CDATA[Quote string as field/table name]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="28" package="Misc">
        <name>_QUOTE_OPTIONS</name>
        <value><![CDATA[0x700]]></value>
        <docblock line="24">
          <description><![CDATA[Any of the quote options]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="ignore" description=""/>
        </docblock>
      </constant>
      <constant namespace="default" line="31" package="Misc">
        <name>SET_VALUE</name>
        <value><![CDATA[0x800]]></value>
        <docblock line="30">
          <description><![CDATA[Quote value as value when adding a column in a '[UPDATE|INSERT] SET ...' query]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="33" package="Misc">
        <name>SET_EXPRESSION</name>
        <value><![CDATA[0x1000]]></value>
        <docblock line="32">
          <description><![CDATA[Quote value as expression when adding a column in a '[UPDATE|INSERT] SET ...' query]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="36" package="Misc">
        <name>UNQUOTE</name>
        <value><![CDATA[0x2000]]></value>
        <docblock line="35">
          <description><![CDATA[Unquote values]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="38" package="Misc">
        <name>CAST</name>
        <value><![CDATA[0x4000]]></value>
        <docblock line="37">
          <description><![CDATA[Cast values]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="41" package="Misc">
        <name>ALL_ROWS</name>
        <value><![CDATA[1]]></value>
        <docblock line="40">
          <description><![CDATA[Count all rows ignoring limit]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="44" package="Misc">
        <name>ASC</name>
        <value><![CDATA[0x10]]></value>
        <docblock line="43">
          <description><![CDATA[Sort ascending]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="default" line="46" package="Misc">
        <name>DESC</name>
        <value><![CDATA[0x20]]></value>
        <docblock line="45">
          <description><![CDATA[Sort descending]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="52" package="Misc">
        <name>$statement</name>
        <default><![CDATA[]]></default>
        <docblock line="48">
          <description><![CDATA[Query statement]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="48" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="58" package="Misc">
        <name>$queryType</name>
        <default><![CDATA[]]></default>
        <docblock line="54">
          <description><![CDATA[The type of the query]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="64" package="Misc">
        <name>$baseParts</name>
        <default><![CDATA[]]></default>
        <docblock line="60">
          <description><![CDATA[The parts of the split base statement extracted in sets]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="71" package="Misc">
        <name>$partsReplace</name>
        <default><![CDATA[]]></default>
        <docblock line="67">
          <description><![CDATA[The parts to replace the ones of the base statement.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="67" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="77" package="Misc">
        <name>$partsAdd</name>
        <default><![CDATA[]]></default>
        <docblock line="73">
          <description><![CDATA[The parts to add to base statement.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="83" package="Misc">
        <name>$subqueries</name>
        <default><![CDATA[]]></default>
        <docblock line="79">
          <description><![CDATA[Extracted subqueries]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="79" name="var" description="" type="\DBQuery[]">
            <type by_reference="false">\DBQuery[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="90" package="Misc">
        <name>$cachedStatement</name>
        <default><![CDATA[]]></default>
        <docblock line="86">
          <description><![CDATA[The build statements]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="86" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="96" package="Misc">
        <name>$cachedParts</name>
        <default><![CDATA[]]></default>
        <docblock line="92">
          <description><![CDATA[The build parts]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="92" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="102" package="Misc">
        <name>$cachedTablenames</name>
        <default><![CDATA[]]></default>
        <docblock line="98">
          <description><![CDATA[Extracted table names]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="98" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="110" package="">
        <name>__construct</name>
        <type>function</type>
        <docblock line="105">
          <description><![CDATA[Class constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="105" name="param" description="Query statement" type="string" variable="$statement">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="110">
          <name>$statement</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="124" package="">
        <name>getType</name>
        <type>function</type>
        <docblock line="118">
          <description><![CDATA[Return the type of the query]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="118" name="param" description="" type="int" variable="$subset">
            <type by_reference="false">int</type>
          </tag>
          <tag line="118" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="135" package="">
        <name>getBaseStatement</name>
        <type>function</type>
        <docblock line="130">
          <description><![CDATA[Return the statement without any added or replaced parts.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="130" name="return" description="$this" type="\DBQuery">
            <type by_reference="false">\DBQuery</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="145" package="">
        <name>__toString</name>
        <type>function</type>
        <docblock line="140">
          <description><![CDATA[Cast statement object to string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="140" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="159" package="">
        <name>getSubquery</name>
        <type>function</type>
        <docblock line="153">
          <description><![CDATA[Get a subquery (from base statement).]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="153" name="param" description="Number of subquery (start with 1)" type="int" variable="$subset">
            <type by_reference="false">int</type>
          </tag>
          <tag line="153" name="return" description="" type="\DBQuery">
            <type by_reference="false">\DBQuery</type>
          </tag>
        </docblock>
        <argument line="159">
          <name>$subset</name>
          <default><![CDATA[1]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="default" line="178" package="">
        <name>getBaseParts</name>
        <type>function</type>
        <docblock line="173">
          <description><![CDATA[Split the base statement]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="173" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="189" package="">
        <name>getParts</name>
        <type>function</type>
        <docblock line="184">
          <description><![CDATA[Apply the added and replacement parts to the parts of the base query.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="184" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="default" line="219" package="">
        <name>getPart</name>
        <type>function</type>
        <docblock line="213">
          <description><![CDATA[Return a specific part of the statement.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="213" name="param" description="The key identifying the part" type="mixed" variable="$key">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="213" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="219">
          <name>$key</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="231" package="">
        <name>getTables</name>
        <type>function</type>
        <docblock line="225">
          <description><![CDATA[Get the tables used in this statement.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="225" name="param" description="DBQuery::SPLIT_% options" type="int" variable="$flags">
            <type by_reference="false">int</type>
          </tag>
          <tag line="225" name="return" description="" type="\DB_Table">
            <type by_reference="false">\DB_Table</type>
          </tag>
        </docblock>
        <argument line="231">
          <name>$flags</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="242" package="">
        <name>getColumns</name>
        <type>function</type>
        <docblock line="236">
          <description><![CDATA[Get the columns used in the statement.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="236" name="param" description="DBQuery::SPLIT_% and DBQuery::UNQUOTE options" type="int" variable="$flags">
            <type by_reference="false">int</type>
          </tag>
          <tag line="236" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="242">
          <name>$flags</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="254" package="">
        <name>getValues</name>
        <type>function</type>
        <docblock line="247">
          <description><![CDATA[Get the values used in the statement.]]></description>
          <long-description><![CDATA[<p>Only for INSERT INTO ... VALUES ... query.</p>]]></long-description>
          <tag line="247" name="param" description="Optional DBQuery::UNQUOTE" type="int" variable="$flags">
            <type by_reference="false">int</type>
          </tag>
          <tag line="247" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="254">
          <name>$flags</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="default" line="267" package="">
        <name>clearCachedStatement</name>
        <type>function</type>
        <docblock line="263">
          <description><![CDATA[Clear cached statement.]]></description>
          <long-description><![CDATA[<p>This doesn't clear cached columns and values.</p>]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="default" line="281" package="">
        <name>setPart</name>
        <type>function</type>
        <docblock line="274">
          <description><![CDATA[Add/set an expression to any part of the query.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="274" name="param" description="The key identifying the part" type="mixed" variable="$part">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="274" name="param" description="" type="string" variable="$expression">
            <type by_reference="false">string</type>
          </tag>
          <tag line="274" name="param" description="DBQuery::APPEND (default), DBQuery::PREPEND or DBQuery::REPLACE + DBQuery::QUOTE_%" type="int" variable="$flags">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="281">
          <name>$part</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="281">
          <name>$expression</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="281">
          <name>$flags</name>
          <default><![CDATA[DBQuery::APPEND]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="312" package="">
        <name>from</name>
        <type>function</type>
        <docblock line="298">
          <description><![CDATA[Add a join statement to the from part.]]></description>
          <long-description><![CDATA[<p>{ @example
  $query = new DBQuery("SELECT");
  $query->from("foo");
  $query->from("bar", "INNER JOIN ON foo.id = bar.foo_id");
}}</p>]]></long-description>
          <tag line="298" name="param" description="tablename" type="string" variable="$table">
            <type by_reference="false">string</type>
          </tag>
          <tag line="298" name="param" description="JOIN ON that.field = this.field" type="string" variable="$join">
            <type by_reference="false">string</type>
          </tag>
          <tag line="298" name="param" description="DBQuery::REPLACE, DBQuery::PREPEND or DBQuery::APPEND + DBQuery::QUOTE_% options as bitset." type="int" variable="$flags">
            <type by_reference="false">int</type>
          </tag>
          <tag line="298" name="return" description="$this" type="\DBQuery">
            <type by_reference="false">\DBQuery</type>
          </tag>
        </docblock>
        <argument line="312">
          <name>$table</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="312">
          <name>$join</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="312">
          <name>$flags</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="343" package="">
        <name>table</name>
        <type>function</type>
        <docblock line="335">
          <description><![CDATA[Alias of DBQuery::from().]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="335" name="param" description="tablename" type="string" variable="$table">
            <type by_reference="false">string</type>
          </tag>
          <tag line="335" name="param" description="JOIN ON that.field = this.field" type="string" variable="$join">
            <type by_reference="false">string</type>
          </tag>
          <tag line="335" name="param" description="DBQuery::REPLACE, DBQuery::PREPEND or DBQuery::APPEND + DBQuery::QUOTE_% options as bitset." type="int" variable="$flags">
            <type by_reference="false">int</type>
          </tag>
          <tag line="335" name="return" description="$this" type="\DBQuery">
            <type by_reference="false">\DBQuery</type>
          </tag>
        </docblock>
        <argument line="343">
          <name>$table</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="343">
          <name>$join</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="343">
          <name>$flags</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="356" package="">
        <name>into</name>
        <type>function</type>
        <docblock line="348">
          <description><![CDATA[Alias of DBQuery::from().]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="348" name="param" description="tablename" type="string" variable="$table">
            <type by_reference="false">string</type>
          </tag>
          <tag line="348" name="param" description="JOIN ON that.field = this.field" type="string" variable="$join">
            <type by_reference="false">string</type>
          </tag>
          <tag line="348" name="param" description="DBQuery::REPLACE, DBQuery::PREPEND or DBQuery::APPEND + DBQuery::QUOTE_% options as bitset." type="int" variable="$flags">
            <type by_reference="false">int</type>
          </tag>
          <tag line="348" name="return" description="$this" type="\DBQuery">
            <type by_reference="false">\DBQuery</type>
          </tag>
        </docblock>
        <argument line="356">
          <name>$table</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="356">
          <name>$join</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="356">
          <name>$flags</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="373" package="">
        <name>column</name>
        <type>function</type>
        <docblock line="362">
          <description><![CDATA[Add column(s) to query statement.]]></description>
          <long-description><![CDATA[<p>Flags:
 Position:   DBQuery::REPLACE, DBQuery::PREPEND or DBQuery::APPEND (default)
 Quote expr: DBQuery::QUOTE_%</p>]]></long-description>
          <tag line="362" name="param" description="Column name or array(column, ...)" type="mixed" variable="$column">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="362" name="param" description="Options as bitset" type="int" variable="$flags">
            <type by_reference="false">int</type>
          </tag>
          <tag line="362" name="return" description="$this" type="\DBQuery">
            <type by_reference="false">\DBQuery</type>
          </tag>
        </docblock>
        <argument line="373">
          <name>$column</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="373">
          <name>$flags</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="397" package="">
        <name>columns</name>
        <type>function</type>
        <docblock line="390">
          <description><![CDATA[Alias of DBQuery::column().]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="390" name="param" description="Column name or array(column, ...)" type="mixed" variable="$column">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="390" name="param" description="Options as bitset" type="int" variable="$flags">
            <type by_reference="false">int</type>
          </tag>
          <tag line="390" name="return" description="$this" type="\DBQuery">
            <type by_reference="false">\DBQuery</type>
          </tag>
        </docblock>
        <argument line="397">
          <name>$column</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="397">
          <name>$flags</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="415" package="">
        <name>set</name>
        <type>function</type>
        <docblock line="402">
          <description><![CDATA[Add an expression to the SET part of an INSERT SET ... or UPDATE SET query]]></description>
          <long-description><![CDATA[<p>Flags:
 Position:   DBQuery::REPLACE, DBQuery::PREPEND or DBQuery::APPEND (default)
 Set:        DBQuery::SET_EXPRESSION or DBQuery::SET_VALUE (default)
 Quote expr: DBQuery::QUOTE_%</p>]]></long-description>
          <tag line="402" name="param" description="Column name or array(column =&gt; value, ...)" type="string|array" variable="$column">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="402" name="param" description="Value or expression (omit if $column is an array)" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="402" name="param" description="Options as bitset" type="int" variable="$flags">
            <type by_reference="false">int</type>
          </tag>
          <tag line="402" name="return" description="$this" type="\DBQuery">
            <type by_reference="false">\DBQuery</type>
          </tag>
        </docblock>
        <argument line="415">
          <name>$column</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="415">
          <name>$value</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="415">
          <name>$flags</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="451" package="">
        <name>values</name>
        <type>function</type>
        <docblock line="444">
          <description><![CDATA[Add a row of values to an "INSERT ... VALUES (...)" query statement.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="444" name="param" description="Statement (string) or array of values or array with rows" type="mixed" variable="$values">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="444" name="param" description="Options as bitset" type="int" variable="$flags">
            <type by_reference="false">int</type>
          </tag>
          <tag line="444" name="return" description="$this" type="\DBQuery">
            <type by_reference="false">\DBQuery</type>
          </tag>
        </docblock>
        <argument line="451">
          <name>$values</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="451">
          <name>$flags</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="488" package="">
        <name>where</name>
        <type>function</type>
        <docblock line="471">
          <description><![CDATA[Add criteria as WHERE expression to query statement.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="471" name="example" description="$query-&gt;where('foo', 10);                                      // WHERE `foo` = 10"/>
          <tag line="471" name="example" description="$query-&gt;where('foo &gt; ?', 10);                                  // WHERE `foo` &gt; 10"/>
          <tag line="471" name="example" description="$query-&gt;where('foo IS NULL');                                  // WHERE `foo` IS NULL"/>
          <tag line="471" name="example" description="$query-&gt;where('foo', array(10, 20));                           // WHERE `foo` IN (10, 20)"/>
          <tag line="471" name="example" description="$query-&gt;where('foo BETWEEN ? AND ?', array(10, 20));           // WHERE `foo` BETWEEN 10 AND 20"/>
          <tag line="471" name="example" description="$query-&gt;where('bar LIKE %?%', &quot;blue&quot;);                         // WHERE `bar` LIKE &quot;%blue%&quot;"/>
          <tag line="471" name="example" description="$query-&gt;where('foo = ? AND bar LIKE %?%', array(10, &quot;blue&quot;));  // WHERE `foo` = 10 AND `bar` LIKE &quot;%blue%&quot;"/>
          <tag line="471" name="example" description="$query-&gt;where(array('foo'=&gt;10, 'bar'=&gt;&quot;blue&quot;));                // WHERE `foo` = 10 AND `bar` = &quot;blue&quot;"/>
          <tag line="471" name="param" description="Expression, column name, column number, expression with placeholders or array(column=&gt;value, ...)" type="mixed" variable="$column">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="471" name="param" description="Value or array of values" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="471" name="param" description="DBQuery::REPLACE, DBQuery::PREPEND or DBQuery::APPEND + DBQuery::QUOTE_%" type="int" variable="$flags">
            <type by_reference="false">int</type>
          </tag>
          <tag line="471" name="return" description="$this" type="\DBQuery">
            <type by_reference="false">\DBQuery</type>
          </tag>
        </docblock>
        <argument line="488">
          <name>$column</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="488">
          <name>$value</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="488">
          <name>$flags</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="true" abstract="false" static="false" visibility="public" namespace="default" line="505" package="">
        <name>having</name>
        <type>function</type>
        <docblock line="496">
          <description><![CDATA[Add criteria as HAVING expression to query statement.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="496" name="see" description="\DBQuery::where()" refers="\DBQuery::where()"/>
          <tag line="496" name="param" description="Expression, column name, column number, expression with placeholders or array(column=&gt;value, ...)" type="mixed" variable="$column">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="496" name="param" description="Value or array of values" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="496" name="param" description="DBQuery::REPLACE, DBQuery::PREPEND or DBQuery::APPEND + DBQuery::QUOTE_%" type="int" variable="$flag">
            <type by_reference="false">int</type>
          </tag>
          <tag line="496" name="return" description="$this" type="\DBQuery">
            <type by_reference="false">\DBQuery</type>
          </tag>
        </docblock>
        <argument line="505">
          <name>$column</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="505">
          <name>$value</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="505">
          <name>$flags</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="520" package="">
        <name>groupBy</name>
        <type>function</type>
        <docblock line="513">
          <description><![CDATA[Add GROUP BY expression to query statement.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="513" name="param" description="GROUP BY expression (string) or array with columns" type="string|array" variable="$column">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="513" name="param" description="DBQuery::REPLACE, DBQuery::PREPEND or DBQuery::APPEND + DBQuery::QUOTE_%" type="int" variable="$flags">
            <type by_reference="false">int</type>
          </tag>
          <tag line="513" name="return" description="$this" type="\DBQuery">
            <type by_reference="false">\DBQuery</type>
          </tag>
        </docblock>
        <argument line="520">
          <name>$column</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="520">
          <name>$flags</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="541" package="">
        <name>orderBy</name>
        <type>function</type>
        <docblock line="534">
          <description><![CDATA[Add ORDER BY expression to query statement.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="534" name="param" description="ORDER BY expression (string) or array with columns" type="mixed" variable="$column">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="534" name="param" description="DBQuery::ASC or DBQuery::DESC + DBQuery::REPLACE, DBQuery::PREPEND (default) or DBQuery::APPEND + DBQuery::QUOTE_%." type="int" variable="$flags">
            <type by_reference="false">int</type>
          </tag>
          <tag line="534" name="return" description="$this" type="\DBQuery">
            <type by_reference="false">\DBQuery</type>
          </tag>
        </docblock>
        <argument line="541">
          <name>$column</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="541">
          <name>$flags</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="567" package="">
        <name>onDuplicateKeyUpdate</name>
        <type>function</type>
        <docblock line="559">
          <description><![CDATA[Add ON DUPLICATE KEY UPDATE to an INSERT query.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="559" name="param" description="Column name or array('column' =&gt; expression, ...), if omitted col=VALUES(col) is added for each column" type="mixed" variable="$column">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="559" name="param" description="Expression or value" type="mixed" variable="$expression">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="559" name="param" description="DBQuery::SET_VALUE or DBQuery::SET_EXPRESSION (default) + DBQuery::REPLACE, DBQuery::PREPEND or DBQuery::APPEND (default) + DBQuery::QUOTE_%" type="int" variable="$flags">
            <type by_reference="false">int</type>
          </tag>
          <tag line="559" name="return" description="$this" type="\DBQuery">
            <type by_reference="false">\DBQuery</type>
          </tag>
        </docblock>
        <argument line="567">
          <name>$column</name>
          <default><![CDATA[true]]></default>
          <type/>
        </argument>
        <argument line="567">
          <name>$expression</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="567">
          <name>$flags</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="597" package="">
        <name>limit</name>
        <type>function</type>
        <docblock line="590">
          <description><![CDATA[Set the limit for the number of rows returned when excecuted.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="590" name="param" description="Number of rows of full limit statement" type="int|string" variable="$rowcount">
            <type by_reference="false">int</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="590" name="param" description="Start at row" type="int" variable="$offset">
            <type by_reference="false">int</type>
          </tag>
          <tag line="590" name="return" description="$this" type="\DBQuery">
            <type by_reference="false">\DBQuery</type>
          </tag>
        </docblock>
        <argument line="597">
          <name>$rowcount</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="597">
          <name>$offset</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="610" package="">
        <name>page</name>
        <type>function</type>
        <docblock line="603">
          <description><![CDATA[Set the limit by specifying the page.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="603" name="param" description="Page numer, starts with page 1" type="int" variable="$page">
            <type by_reference="false">int</type>
          </tag>
          <tag line="603" name="param" description="Number of rows per page" type="int" variable="$rowcount">
            <type by_reference="false">int</type>
          </tag>
          <tag line="603" name="return" description="$this" type="\DBQuery">
            <type by_reference="false">\DBQuery</type>
          </tag>
        </docblock>
        <argument line="610">
          <name>$page</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="610">
          <name>$rowcount</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="default" line="623" package="">
        <name>__callStatic</name>
        <type>function</type>
        <docblock line="616">
          <description><![CDATA[Magic method to build a query from scratch.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="616" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="616" name="param" description="" type="array" variable="$args">
            <type by_reference="false">array</type>
          </tag>
          <tag line="616" name="return" description="" type="\DBQuery">
            <type by_reference="false">\DBQuery</type>
          </tag>
        </docblock>
        <argument line="623">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="623">
          <name>$args</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="651" package="">
        <name>__call</name>
        <type>function</type>
        <docblock line="644">
          <description><![CDATA[Magic method to get or set any part of the query.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="644" name="param" description="" type="string" variable="$part">
            <type by_reference="false">string</type>
          </tag>
          <tag line="644" name="param" description="" type="array" variable="$args">
            <type by_reference="false">array</type>
          </tag>
          <tag line="644" name="return" description="$this" type="\DBQuery">
            <type by_reference="false">\DBQuery</type>
          </tag>
        </docblock>
        <argument line="651">
          <name>$part</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="651">
          <name>$args</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="default" line="678" package="">
        <name>count</name>
        <type>function</type>
        <docblock line="672">
          <description><![CDATA[Get a query to count the number of rows that the resultset would contain.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="672" name="param" description="DBQuery::ALL_ROWS" type="int" variable="$flags">
            <type by_reference="false">int</type>
          </tag>
          <tag line="672" name="return" description="" type="\DBQuery">
            <type by_reference="false">\DBQuery</type>
          </tag>
        </docblock>
        <argument line="678">
          <name>$flags</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <package name="" full_name=""/>
  <package name="DBQuery" full_name="DBQuery"/>
  <package name="Default" full_name="Default"/>
  <package name="Misc" full_name="Misc"/>
  <package name="Test" full_name="Test">
    <package name="DBQuery" full_name="Test\DBQuery"/>
  </package>
  <namespace name="default" full_name="default"/>
  <marker count="6">todo</marker>
  <marker count="0">fixme</marker>
  <deprecated count="0"/>
</project>
